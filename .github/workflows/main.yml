name: main

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: CLANG64, repo: clang64, arch: x86_64, can-fail: false },
          { msystem: CLANG32, repo: clang32, arch: i686, can-fail: false },
          #{ msystem: CLANGARM64, arch: aarch64, can-fail: true },
        ]
    name: ${{ matrix.msystem }}
    continue-on-error: ${{ matrix.can-fail }}
    steps:

      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: msys2/MINGW-packages
          path: temp
          fetch-depth: 0

      # to match the autobuild environment
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - uses: msys2/setup-msys2@v2
        with:
          msystem: MSYS
          install: git msys2-devel base-devel binutils
          update: true

      - name: Add staging repo
        shell: msys2 {0}
        run: |
          sed -i '1s|^|[staging]\nServer = https://repo.msys2.org/staging/\nSigLevel = Never\n|' /etc/pacman.conf

      - name: Add stage1 bootstrap repo
        shell: msys2 {0}
        run: |
          sed -i '1s|^|[${{ matrix.repo }}]\nServer = https://github.com/msys2/CLANG-packages/releases/download/bootstrap-${{ matrix.repo }}/\nSigLevel = Never\n|' /etc/pacman.conf

      - name: Update using staging
        run: |
          msys2 -c 'pacman --noconfirm -Suuy'
          msys2 -c 'pacman --noconfirm -Suu'

      - name: Install stage1 bootstrap packages
        shell: msys2 {0}
        run: |
          pacman --noconfirm --noprogressbar -S $(pacman -Sqs mingw-w64-clang-${{ matrix.arch }}-*)

      - name: Move Checkout
        run: |
          Copy-Item -Path ".\temp" -Destination "C:\_" -Recurse

      - name: Apply bootstrap patches
        shell: msys2 {0}
        run: |
          WORKSPACE="$(pwd)"
          cd /C/_
          git config --global user.name 'MSYS2 Continuous Integration'
          git config --global user.email 'ci@msys2.org'
          git am --committer-date-is-author-date ${WORKSPACE}/00*.patch

      - name: Workaround PLY cert issue
        shell: cmd
        run: |
          C:
          cd \_\mingw-w64-python-ply
          curl -LO "https://www.dabeaz.com/ply/ply-3.11.tar.gz"

      - name: Build bootstrap
        shell: msys2 {0}
        env:
          MSYSTEM: ${{ matrix.msystem }}
        run: |
          WORKSPACE="$(pwd)"
          cd /C/_
          mkdir packages sources
          ${WORKSPACE}/build_bootstrap.sh

      - name: "Upload binaries"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.msystem }}-packages
          path: C:/_/packages/*

      - name: "Upload sources"
        if:  ${{ matrix.msystem == 'CLANG64' }}
        uses: actions/upload-artifact@v2
        with:
          name: sources
          path: C:/_/sources/*
  publish:
    needs: [ build ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: [
          { tagname: clang64, artifact: CLANG64-packages, can-fail: false },
          { tagname: clang32, artifact: CLANG32-packages, can-fail: false },
          #{ tagname: clangarm64, artifact: CLANGARM64-packages, can-fail: true },
          { tagname: sources, artifact: sources, can-fail: false },
        ]
    continue-on-error: ${{ matrix.can-fail }}
    if: ${{ github.event_name == 'workflow_dispatch' && startsWith(github.ref, 'refs/heads/') }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

      - name: Get branch name
        id: gitbranch
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"

      - uses: eine/tip@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.gitbranch.outputs.branch }}-${{ matrix.tagname }}
          rm: true
          files: ${{ matrix.artifact }}/*
