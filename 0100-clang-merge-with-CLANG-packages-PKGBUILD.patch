From 30e2c394f4007d3faa7e9fd70d6480647631ed06 Mon Sep 17 00:00:00 2001
From: Jeremy Drake <github@jdrake.com>
Date: Tue, 26 Jan 2021 16:42:58 -0800
Subject: [PATCH] clang: merge with CLANG-packages PKGBUILD

Add posix style path separators patches, and disable pthread and emutls
patches on clangprefix.  Install llvm-windres for all prefixes.
---
 ...six-style-path-separators-with-MinGW.patch |  76 ++++
 ...six-style-path-separators-with-MinGW.patch |  42 ++
 mingw-w64-clang/PKGBUILD                      | 159 +++++--
 mingw-w64-clang/native-wrapper.h              | 191 +++++++++
 mingw-w64-clang/windres-wrapper.c             | 405 ++++++++++++++++++
 mingw-w64-clang/windres.LICENSE               |  18 +
 6 files changed, 861 insertions(+), 30 deletions(-)
 create mode 100644 mingw-w64-clang/0001-Use-posix-style-path-separators-with-MinGW.patch
 create mode 100644 mingw-w64-clang/0103-Use-posix-style-path-separators-with-MinGW.patch
 create mode 100644 mingw-w64-clang/native-wrapper.h
 create mode 100644 mingw-w64-clang/windres-wrapper.c
 create mode 100644 mingw-w64-clang/windres.LICENSE

diff --git a/mingw-w64-clang/0001-Use-posix-style-path-separators-with-MinGW.patch b/mingw-w64-clang/0001-Use-posix-style-path-separators-with-MinGW.patch
new file mode 100644
index 000000000..76051ef4c
--- /dev/null
+++ b/mingw-w64-clang/0001-Use-posix-style-path-separators-with-MinGW.patch
@@ -0,0 +1,76 @@
+From 07f996a95eece4e2b40249e5c8a702f3096ef70f Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Mateusz=20Miku=C5=82a?= <mati865@gmail.com>
+Date: Sun, 22 Nov 2020 17:49:19 +0100
+Subject: [PATCH 2/2] Use posix style path separators with MinGW
+
+---
+ lib/Support/Path.cpp            | 4 ++++
+ lib/Support/Windows/Path.inc    | 5 +++++
+ lib/Support/Windows/Program.inc | 7 ++++++-
+ 3 files changed, 15 insertions(+), 1 deletion(-)
+
+diff --git a/lib/Support/Path.cpp b/lib/Support/Path.cpp
+index 37b3086fddf..8ab8e33f248 100644
+--- a/lib/Support/Path.cpp
++++ b/lib/Support/Path.cpp
+@@ -51,8 +51,10 @@ namespace {
+   }
+ 
+   inline char preferred_separator(Style style) {
++#ifndef __MINGW32__
+     if (real_style(style) == Style::windows)
+       return '\\';
++#endif
+     return '/';
+   }
+ 
+@@ -611,8 +613,10 @@ bool is_separator(char value, Style style) {
+ }
+ 
+ StringRef get_separator(Style style) {
++#ifndef __MINGW32__
+   if (real_style(style) == Style::windows)
+     return "\\";
++#endif
+   return "/";
+ }
+ 
+diff --git a/lib/Support/Windows/Path.inc b/lib/Support/Windows/Path.inc
+index e352beb7761..501e252f188 100644
+--- a/lib/Support/Windows/Path.inc
++++ b/lib/Support/Windows/Path.inc
+@@ -146,7 +146,12 @@ std::string getMainExecutable(const char *argv0, void *MainExecAddr) {
+   if (UTF16ToUTF8(PathName.data(), PathName.size(), PathNameUTF8))
+     return "";
+ 
++#ifndef __MINGW32__
+   return std::string(PathNameUTF8.data());
++#else
++  return llvm::sys::path::convert_to_slash(std::string(PathNameUTF8.data()),
++                                           llvm::sys::path::Style::windows);
++#endif
+ }
+ 
+ UniqueID file_status::getUniqueID() const {
+diff --git a/lib/Support/Windows/Program.inc b/lib/Support/Windows/Program.inc
+index 9fe05d24ec2..9e6fe77ca4f 100644
+--- a/lib/Support/Windows/Program.inc
++++ b/lib/Support/Windows/Program.inc
+@@ -101,8 +101,13 @@ ErrorOr<std::string> sys::findProgramByName(StringRef Name,
+   if (std::error_code EC =
+           windows::UTF16ToUTF8(U16Result.data(), U16Result.size(), U8Result))
+     return EC;
+-
++#ifndef __MINGW32__
+   return std::string(U8Result.begin(), U8Result.end());
++#else
++  return llvm::sys::path::convert_to_slash(
++      std::string(U8Result.begin(), U8Result.end()),
++      llvm::sys::path::Style::windows);
++#endif
+ }
+ 
+ bool MakeErrMsg(std::string *ErrMsg, const std::string &prefix) {
+-- 
+2.29.2.windows.2
+
diff --git a/mingw-w64-clang/0103-Use-posix-style-path-separators-with-MinGW.patch b/mingw-w64-clang/0103-Use-posix-style-path-separators-with-MinGW.patch
new file mode 100644
index 000000000..84993a0c1
--- /dev/null
+++ b/mingw-w64-clang/0103-Use-posix-style-path-separators-with-MinGW.patch
@@ -0,0 +1,42 @@
+From 0ded2b5e1c163ca5a1e529c7e3e3e5f44d1046de Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Mateusz=20Miku=C5=82a?= <mati865@gmail.com>
+Date: Fri, 20 Nov 2020 13:01:23 +0100
+Subject: Use posix style path separators with MinGW
+
+---
+ tools/driver/driver.cpp | 10 ++++++++++
+ 1 file changed, 10 insertions(+)
+
+diff --git a/tools/driver/driver.cpp b/tools/driver/driver.cpp
+index f24fd61e61a..717e6d11f18 100644
+--- a/tools/driver/driver.cpp
++++ b/tools/driver/driver.cpp
+@@ -62,7 +62,12 @@ std::string GetExecutablePath(const char *Argv0, bool CanonicalPrefixes) {
+       if (llvm::ErrorOr<std::string> P =
+               llvm::sys::findProgramByName(ExecutablePath))
+         ExecutablePath = *P;
++#ifndef __MINGW32__
+     return std::string(ExecutablePath.str());
++#else
++    return llvm::sys::path::convert_to_slash(std::string(ExecutablePath.str()),
++                                             llvm::sys::path::Style::windows);
++#endif
+   }
+ 
+   // This just needs to be some symbol in the binary; C++ doesn't
+@@ -296,7 +301,12 @@ static void SetInstallDir(SmallVectorImpl<const char *> &argv,
+   // Attempt to find the original path used to invoke the driver, to determine
+   // the installed path. We do this manually, because we want to support that
+   // path being a symlink.
++#ifndef __MINGW32__
+   SmallString<128> InstalledPath(argv[0]);
++#else
++  SmallString<128> InstalledPath(llvm::sys::path::convert_to_slash(
++      argv[0], llvm::sys::path::Style::windows));
++#endif
+ 
+   // Do a PATH lookup, if there are no directory components.
+   if (llvm::sys::path::filename(InstalledPath) == InstalledPath)
+-- 
+2.29.2.windows.2
+
diff --git a/mingw-w64-clang/PKGBUILD b/mingw-w64-clang/PKGBUILD
index c204d7ceb..2df9ec74c 100644
--- a/mingw-w64-clang/PKGBUILD
+++ b/mingw-w64-clang/PKGBUILD
@@ -8,6 +8,10 @@
 # Contributor: Adrian Pop <adrian.pop@liu.se>
 
 _compiler=gcc
+if [[ $MINGW_PACKAGE_PREFIX == *-clang-* ]]; then
+  _clangprefix=1
+  _compiler=clang
+fi
 # "Ninja" cant install each component seperately
 # https://github.com/martine/ninja/issues/932
 _generator="MSYS Makefiles"
@@ -30,15 +34,17 @@ pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}"
          "${MINGW_PACKAGE_PREFIX}-lld"
          "${MINGW_PACKAGE_PREFIX}-lldb"
          "${MINGW_PACKAGE_PREFIX}-llvm"
-         "${MINGW_PACKAGE_PREFIX}-openmp"
+         $([[ "$CARCH" == "i686" || "$CARCH" == "x86_64" ]] && echo \
+           "${MINGW_PACKAGE_PREFIX}-openmp")
          "${MINGW_PACKAGE_PREFIX}-polly")
 pkgver=11.0.0
-pkgrel=8
+pkgrel=9
 pkgdesc="C language family frontend for LLVM (mingw-w64)"
 arch=('any')
-mingw_arch=('mingw32' 'mingw64' 'ucrt64')
+mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang32' 'clang64' 'clangarm64')
 url="https://llvm.org/"
 license=("custom:Apache 2.0 with LLVM Exception")
+groups=($( (( _clangprefix )) && echo "${MINGW_PACKAGE_PREFIX}-toolchain"))
 makedepends=("${MINGW_PACKAGE_PREFIX}-cmake>=3.4.3"
              "${MINGW_PACKAGE_PREFIX}-z3"
              "${MINGW_PACKAGE_PREFIX}-libffi"
@@ -46,7 +52,8 @@ makedepends=("${MINGW_PACKAGE_PREFIX}-cmake>=3.4.3"
              "${MINGW_PACKAGE_PREFIX}-python-sphinx"
              "${MINGW_PACKAGE_PREFIX}-python"
              "${MINGW_PACKAGE_PREFIX}-swig"
-             "${MINGW_PACKAGE_PREFIX}-uasm"
+             $([[ "$CARCH" == "i686" || "$CARCH" == "x86_64" ]] && echo \
+               "${MINGW_PACKAGE_PREFIX}-uasm")
              "tar"
              "groff"
              $([[ "$_compiler" == "clang" ]] && echo \
@@ -72,6 +79,7 @@ source=(${_url}/llvm-${pkgver}.src.tar.xz{,.sig}
         ${_url}/lldb-${pkgver}.src.tar.xz{,.sig}
         ${_url}/libunwind-${pkgver}.src.tar.xz{,.sig}
         ${_url}/polly-${pkgver}.src.tar.xz{,.sig}
+        "0001-Use-posix-style-path-separators-with-MinGW.patch"
         "0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
         "0004-llvm-config-look-for-unversioned-shared-lib-on-win32.patch"
         "0005-add-pthread-as-system-lib-for-mingw.patch"
@@ -83,6 +91,7 @@ source=(${_url}/llvm-${pkgver}.src.tar.xz{,.sig}
         "0013-Add-Z3-to-system-libraries-list-if-enabled.patch"
         "0101-Allow-build-static-clang-library-for-mingw.patch"
         "0102-fix-libclang-name-for-mingw.patch"
+        "0103-Use-posix-style-path-separators-with-MinGW.patch"
         "0104-link-pthread-with-mingw.patch"
         "0105-build-libclang-cpp-fix.patch"
         "0106-cmake-Fix-build-of-attribute-plugin-example-on-Windo.patch"
@@ -93,7 +102,10 @@ source=(${_url}/llvm-${pkgver}.src.tar.xz{,.sig}
         "0304-ignore-new-bfd-options.patch"
         "0305-use-TerminateProcess-instead-of-exit.patch"
         "0504-fix-lldb-library-name-mingw.patch"
-        "0801-Don-t-build-LLVMPolly-on-WIN32.patch")
+        "0801-Don-t-build-LLVMPolly-on-WIN32.patch"
+        "native-wrapper.h"
+        "windres-wrapper.c"
+        "windres.LICENSE")
 # Some patch notes :)
 #0001-0099 -> llvm
 #0101-0199 -> clang
@@ -129,6 +141,7 @@ sha256sums=('913f68c898dfb4a03b397c5e11c6a2f39d0f22ed7665c9cefa87a34423a72469'
             'SKIP'
             'dcfadb8d11f2ea0743a3f19bab3b43ee1cb855e136bc81c76e2353cd76148440'
             'SKIP'
+            '988a22053c1cc3fa52b1242b3a7cec591ca69b57eb5531c37ce9c74157db62a0'
             '9b6d3ecb0ef4a38d34aefaefff8c6257ff22d366d84630020d7f079dc8065d97'
             '1f318c0370357fdf9c54ae6d31bad761b0caa58ac099998937b636309ecb6590'
             '7f0c64cd87b61e894be632f180ae5291e1aa9f1d9d382608f659067eeeda7146'
@@ -140,6 +153,7 @@ sha256sums=('913f68c898dfb4a03b397c5e11c6a2f39d0f22ed7665c9cefa87a34423a72469'
             'a2f0e8090a9450abe51e43ba9e9c8ff4b2a4024ba394deea4b8aff547e30fc33'
             'ddc43bc16f5edaf5290adabd71ce6a8a593fc3f824d7d99acd247bcce88aaf03'
             '01b029f2a21bd998ce374a90d41d214c891dfbb611dfbd9ca147517cd2c228ea'
+            '2d1dc7f7cd6bd61f275cd0be6650f3086aee622074ac786ff5a921bf8ecaada2'
             '53646dd01af2862473e9719c5223366486268891ccbff86413943a432a8342e9'
             'a60f7328d84628a56a9f626e4dc26ffd0c35292c79eeba62ac3d4f25aef2fe5c'
             '0098da33ce4cfea2a6b6943c15e769345f89b84ebea28facff4cc8b92a17bc8f'
@@ -150,7 +164,10 @@ sha256sums=('913f68c898dfb4a03b397c5e11c6a2f39d0f22ed7665c9cefa87a34423a72469'
             '778e0db0a5b0657ab05e2a81d83241347a4a41af2b0f9903422f651fa58e8d40'
             '9482cde0ae847c4435ec2294805bdaecac3f6b9eea30c89bd7fca15103cf2728'
             'bed7ae642486a8fd0db5afb0b9afcd8a87605de318ad891bf4c9378a2eb09dc2'
-            'bc394e597f8939b6f6630bd88c990f951738aaadacded2f3be71c658e9608fe7')
+            'bc394e597f8939b6f6630bd88c990f951738aaadacded2f3be71c658e9608fe7'
+            'c9758342cb926605cd1b30ccb92e6b47f5cc930a15904462e0445959f9be49c1'
+            '343b311e77959c026b2aa3fd92b3f2c6002ea8a9d1d5d240e3d3ad93ad27e5a7'
+            '07368fd2805f45f706a5f63051e161989e97bd150731ee88976a04edd8546d54')
 validpgpkeys=('B6C8F98282B944E3B0D5C2530FC3042E345AD05D'  # Hans Wennborg, Google.
               '474E22316ABF4785A88C6E8EA2C794A986419D8A') # Tom Stellard
 noextract=(clang-${pkgver}.src.tar.xz
@@ -181,14 +198,19 @@ prepare() {
 
   cd "${srcdir}/llvm-${pkgver}.src"
   apply_patch_with_msg \
+      "0001-Use-posix-style-path-separators-with-MinGW.patch" \
       "0002-Fix-GetHostTriple-for-mingw-w64-in-msys.patch" \
       "0004-llvm-config-look-for-unversioned-shared-lib-on-win32.patch" \
-      "0005-add-pthread-as-system-lib-for-mingw.patch" \
-      "0008-enable-emutls-for-mingw.patch" \
       "0009-empty-target-prefix-only-msvc.patch" \
       "0010-mbig-obj-for-all.patch" \
       "0013-Add-Z3-to-system-libraries-list-if-enabled.patch"
 
+  if (( ! _clangprefix )); then
+    apply_patch_with_msg \
+      "0005-add-pthread-as-system-lib-for-mingw.patch" \
+      "0008-enable-emutls-for-mingw.patch"
+  fi
+
   # https://bugs.llvm.org/show_bug.cgi?id=25493
   apply_patch_with_msg \
       "0006-add-coff-exported-flag.patch"
@@ -200,10 +222,15 @@ prepare() {
   apply_patch_with_msg \
       "0101-Allow-build-static-clang-library-for-mingw.patch" \
       "0102-fix-libclang-name-for-mingw.patch" \
-      "0104-link-pthread-with-mingw.patch" \
+      "0103-Use-posix-style-path-separators-with-MinGW.patch" \
       "0105-build-libclang-cpp-fix.patch" \
       "0106-cmake-Fix-build-of-attribute-plugin-example-on-Windo.patch"
 
+  if (( ! _clangprefix )); then
+    apply_patch_with_msg \
+      "0104-link-pthread-with-mingw.patch"
+  fi
+
   cd "${srcdir}/compiler-rt-${pkgver}.src"
   apply_patch_with_msg \
       "0201-Compiler-RT-Fix-profiler-building-with-MinGW-GCC.patch"
@@ -263,25 +290,51 @@ build() {
   if [ "${_compiler}" == "clang" ]; then
     export CC='clang'
     export CXX='clang++'
-    extra_config+=(-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON -DLLVM_ENABLE_LIBCXX=ON)
+    extra_config+=(-DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON
+      -DLLVM_ENABLE_LIBCXX=ON)
   fi
 
-  export ASM_COMPILER="${MINGW_PREFIX}/bin/uasm.exe"
-  if [ "${CARCH}" == "x86_64" ]; then
-    export ASM_COMPILER_FLAGS=-win64
+  if (( _clangprefix )); then
+    # A bit hacky but it works
+    local _clang_links="clang++;clang-cpp;as;c++;cc;cpp;g++;gcc;${MINGW_CHOST}-cc;${MINGW_CHOST}-c++;${MINGW_CHOST}-clang;${MINGW_CHOST}-clang++;${MINGW_CHOST}-g++;${MINGW_CHOST}-gcc"
+
+    extra_config+=(-DCLANG_DEFAULT_RTLIB=compiler-rt
+      -DCLANG_DEFAULT_UNWINDLIB=libunwind
+      -DCLANG_DEFAULT_CXX_STDLIB=libc++
+      -DCLANG_DEFAULT_LINKER=lld
+      -DLLVM_ENABLE_LLD=ON
+      -DCLANG_LINKS_TO_CREATE="${_clang_links}"
+      -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON)
   fi
 
+  local _projects="clang;clang-tools-extra;compiler-rt;lld;lldb;polly"
+  local -a platform_config
+
+  case "${CARCH}" in
+    x86_64)
+      export ASM_COMPILER_FLAGS=-win64
+      platform_config+=(-DLIBOMP_ASMFLAGS="${ASM_COMPILER_FLAGS}")
+      ;& # fall-through
+    i?86)
+      export ASM_COMPILER="${MINGW_PREFIX}/bin/uasm.exe"
+      platform_config+=(-DCMAKE_ASM_MASM_COMPILER="${ASM_COMPILER}")
+      _projects+=";openmp"
+      ;;
+    armv7|aarch64)
+      platform_config+=(-DCOMPILER_RT_BUILD_MEMPROF=OFF
+        -DCOMPILER_RT_BUILD_XRAY=OFF)
+      ;;
+  esac
+
   MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
   ${MINGW_PREFIX}/bin/cmake.exe \
     -G"$_generator" \
-    -DCMAKE_ASM_MASM_COMPILER="${ASM_COMPILER}" \
     -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
     -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
     -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
     -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}" \
     -DLIBCLANG_BUILD_STATIC=ON \
-    -DLIBOMP_ASMFLAGS="${ASM_COMPILER_FLAGS}" \
-    -DLIBOMP_FORTRAN_MODULES=ON \
+    -DLIBOMP_FORTRAN_MODULES=$( (( _clangprefix )) && echo "OFF" || echo "ON" ) \
     -DLLD_DEFAULT_LD_LLD_IS_MINGW=ON \
     -DLLDB_ENABLE_LIBEDIT=OFF \
     -DLLDB_USE_SYSTEM_SIX=ON \
@@ -289,22 +342,28 @@ build() {
     -DLLVM_BUILD_STATIC=OFF \
     -DLLVM_ENABLE_ASSERTIONS=OFF \
     -DLLVM_ENABLE_FFI=ON \
-    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;lld;lldb;openmp;polly" \
+    -DLLVM_ENABLE_PROJECTS="${_projects}" \
     -DLLVM_ENABLE_SPHINX=ON \
     -DLLVM_ENABLE_THREADS=ON \
+    -DLLVM_HOST_TRIPLE="${MINGW_CHOST}" \
     -DLLVM_INCLUDE_EXAMPLES=OFF \
     -DLLVM_LINK_LLVM_DYLIB=ON \
     -DLLVM_POLLY_LINK_INTO_TOOLS=OFF \
     -DPython3_FIND_REGISTRY=NEVER \
     -DPython3_ROOT_DIR=${MINGW_PREFIX} \
     -DLLDB_EMBED_PYTHON_HOME=OFF \
+    "${platform_config[@]}" \
     "${extra_config[@]}" \
     ../llvm-${pkgver}.src
 
   # sed away the bad windows style command line parameters (they are translated by msys from /bad to c:\msys\bad
   # Ninja doesn't need fixing them.
-  sed -i.orig 's/\/c \/Fo/-c -Fo/' projects/openmp/runtime/src/CMakeFiles/omp.dir/build.make
-  sed -i.orig 's/\/safeseh \/coff/-safeseh -coff/' projects/openmp/runtime/src/CMakeFiles/omp.dir/build.make
+  case "${CARCH}" in
+    i?86|x86_64)
+      sed -i.orig 's/\/c \/Fo/-c -Fo/' projects/openmp/runtime/src/CMakeFiles/omp.dir/build.make
+      sed -i.orig 's/\/safeseh \/coff/-safeseh -coff/' projects/openmp/runtime/src/CMakeFiles/omp.dir/build.make
+      ;;
+  esac
 
   ${_make_cmd}
 
@@ -315,14 +374,22 @@ build() {
   sed -i.orig '/\(extra\|scan-build\|scan-view\)\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
   sed -i.orig '/\(compiler-rt\|libcxxabi\|libcxx\|openmp\|libunwind\)\/cmake_install.cmake/d' projects/cmake_install.cmake
 
+  local -a COMMON_CMAKE_ARGS
   # Use newly built compiler because GCC/binutils doesn't play nicely
-  export CC="${srcdir}/build-${CARCH}/bin/clang"
-  export CXX="${srcdir}/build-${CARCH}/bin/clang++"
+  if (( _clangprefix )); then
+    COMMON_CMAKE_ARGS+=(-DLIBCXX_USE_COMPILER_RT=ON
+      -DLIBCXXABI_USE_COMPILER_RT=ON
+      -DLIBCXXABI_USE_LLVM_UNWINDER=ON)
+  else
+    export CC="${srcdir}/build-${CARCH}/bin/clang"
+    export CXX="${srcdir}/build-${CARCH}/bin/clang++"
+    COMMON_CMAKE_ARGS+=(-DCMAKE_AR=${srcdir}/build-${CARCH}/bin/llvm-ar
+      -DCMAKE_RANLIB=${srcdir}/build-${CARCH}/bin/llvm-ranlib)
+  fi
+
   # Force win32 threads for libc++abi
   export CXXFLAGS="${CXXFLAGS} -D_LIBCPP_HAS_THREAD_API_WIN32"
-  COMMON_CMAKE_ARGS=(-DCMAKE_AR=${srcdir}/build-${CARCH}/bin/llvm-ar
-    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX}
-    -DCMAKE_RANLIB=${srcdir}/build-${CARCH}/bin/llvm-ranlib
+  COMMON_CMAKE_ARGS+=(-DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX}
     -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib
     -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=ON
     -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON
@@ -334,6 +401,7 @@ build() {
     -DLIBUNWIND_USE_COMPILER_RT=ON
     -DLLVM_ENABLE_LLD=ON
     -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi;libunwind"
+    -DLLVM_HOST_TRIPLE="${MINGW_CHOST}"
     -DPython3_FIND_REGISTRY=NEVER
     -DPython3_ROOT_DIR=${MINGW_PREFIX})
 
@@ -372,6 +440,13 @@ build() {
     ../llvm-${pkgver}.src
 
   ${_make_cmd} unwind cxxabi cxx
+
+  cd "${srcdir}"
+
+  [[ -d build-windres-${CARCH} ]] && rm -rf build-windres-${CARCH}
+  mkdir build-windres-${CARCH} && cd build-windres-${CARCH}
+
+  $CC $CFLAGS $LDFLAGS -DDEFAULT_TARGET=\"${MINGW_CHOST}\" ../windres-wrapper.c -o llvm-windres.exe
 }
 
 check() {
@@ -387,8 +462,14 @@ package_clang() {
   pkgdesc="C language family frontend for LLVM (mingw-w64)"
   url="https://clang.llvm.org/"
   depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}"
-           "${MINGW_PACKAGE_PREFIX}-gcc"
+           $( ((_clangprefix)) && echo \
+             "${MINGW_PACKAGE_PREFIX}-compiler-rt=${pkgver}-${pkgrel}" \
+             "${MINGW_PACKAGE_PREFIX}-lld=${pkgver}-${pkgrel}" \
+             || echo "${MINGW_PACKAGE_PREFIX}-gcc")
            "${MINGW_PACKAGE_PREFIX}-z3")
+  provides=($( (( _clangprefix )) && echo \
+             "${MINGW_PACKAGE_PREFIX}-gcc" \
+             || true ))
 
   cd "${srcdir}/clang"
   ${_make_cmd} -C ../build-${CARCH}/tools/clang DESTDIR="${pkgdir}" install
@@ -432,7 +513,7 @@ package_clang-tools-extra() {
 package_compiler-rt() {
   pkgdesc="Runtime libraries for Clang and LLVM (mingw-w64)"
   url="https://compiler-rt.llvm.org/"
-  depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
+  depends=($( (( _clangprefix )) || echo "${MINGW_PACKAGE_PREFIX}-gcc-libs"))
 
   cd "${srcdir}"/compiler-rt
   ${_make_cmd} -C ../build-${CARCH}/projects/compiler-rt DESTDIR="${pkgdir}" install
@@ -441,7 +522,12 @@ package_compiler-rt() {
 package_libc++() {
   pkgdesc="C++ Standard Library (mingw-w64)"
   url="https://libcxx.llvm.org/"
-  depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
+  provides=($( (( _clangprefix )) && echo \
+             "${MINGW_PACKAGE_PREFIX}-gcc-libs" \
+             || true))
+  depends=($( (( _clangprefix )) && echo \
+             "${MINGW_PACKAGE_PREFIX}-libunwind" \
+             || echo "${MINGW_PACKAGE_PREFIX}-gcc-libs"))
 
   cd "${srcdir}/libcxx"
   ${_make_cmd} -C ../build-libcxx-shared-${CARCH}/projects/libcxx DESTDIR="${pkgdir}" install
@@ -453,7 +539,7 @@ package_libc++() {
 package_openmp() {
   pkgdesc="OpenMP library (mingw-w64)"
   url="https://openmp.llvm.org/"
-  depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
+  depends=($( (( _clangprefix )) || echo "${MINGW_PACKAGE_PREFIX}-gcc-libs"))
 
   cd "${srcdir}/openmp"
   ${_make_cmd} -C ../build-${CARCH}/projects/openmp DESTDIR="${pkgdir}" install
@@ -462,7 +548,8 @@ package_openmp() {
 package_libc++abi() {
   pkgdesc="C++ Standard Library Support (mingw-w64)"
   url="https://libcxxabi.llvm.org/"
-  depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
+  depends=($( (( _clangprefix )) || echo \
+             "${MINGW_PACKAGE_PREFIX}-gcc-libs"))
 
   cd "${srcdir}/libcxxabi"
   ${_make_cmd} -C ../build-libcxx-static-${CARCH}/projects/libcxxabi DESTDIR="${pkgdir}" install
@@ -471,7 +558,7 @@ package_libc++abi() {
 package_libunwind() {
   pkgdesc='A new implementation of a stack unwinder for C++ exceptions (mingw-w64)'
   url='https://llvm.org/'
-  depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs")
+  depends=($( (( _clangprefix )) || echo "${MINGW_PACKAGE_PREFIX}-gcc-libs"))
 
   cd "${srcdir}/libunwind"
   ${_make_cmd} -C ../build-libcxx-static-${CARCH}/projects/libunwind DESTDIR="${pkgdir}" install
@@ -484,9 +571,15 @@ package_lld() {
   pkgdesc="Linker tools for LLVM (mingw-w64)"
   url="https://lld.llvm.org/"
   depends=("${MINGW_PACKAGE_PREFIX}-llvm=${pkgver}-${pkgrel}")
+  provides=($( (( _clangprefix )) && echo \
+             "${MINGW_PACKAGE_PREFIX}-binutils" \
+             || true))
 
   cd "${srcdir}/lld"
   ${_make_cmd} -C ../build-${CARCH}/tools/lld DESTDIR="${pkgdir}" install
+  if (( _clangprefix )); then
+    install -Dm755 "${pkgdir}${MINGW_PREFIX}/bin/lld.exe" "${pkgdir}${MINGW_PREFIX}/bin/ld.exe"
+  fi
 }
 
 package_lldb() {
@@ -533,6 +626,12 @@ package_llvm() {
   # fix cmake files.
   local PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
   sed -e "s|${PREFIX_WIN}|${MINGW_PREFIX}|g" -i ${pkgdir}/${MINGW_PREFIX}/lib/cmake/llvm/LLVMExports.cmake
+  install -Dm755 "${srcdir}/build-windres-${CARCH}/llvm-windres.exe" "${pkgdir}${MINGW_PREFIX}/bin/llvm-windres.exe"
+  if (( _clangprefix )); then
+    install -Dm755 "${srcdir}/build-windres-${CARCH}/llvm-windres.exe" "${pkgdir}${MINGW_PREFIX}/bin/${MINGW_CHOST}-windres.exe"
+    install -Dm755 "${srcdir}/build-windres-${CARCH}/llvm-windres.exe" "${pkgdir}${MINGW_PREFIX}/bin/windres.exe"
+  fi
+  install -Dm644 ../windres.LICENSE "${pkgdir}${MINGW_PREFIX}/share/licenses/llvm-windres/LICENSE"
 }
 
 package_polly() {
diff --git a/mingw-w64-clang/native-wrapper.h b/mingw-w64-clang/native-wrapper.h
new file mode 100644
index 000000000..7b0c16f28
--- /dev/null
+++ b/mingw-w64-clang/native-wrapper.h
@@ -0,0 +1,191 @@
+/*
+ * Copyright (c) 2018 Martin Storsjo
+ *
+ * This file is part of llvm-mingw.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#ifdef UNICODE
+#define _UNICODE
+#endif
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <ctype.h>
+
+#ifdef _WIN32
+#define WIN32_LEAN_AND_MEAN
+#include <tchar.h>
+#include <windows.h>
+#include <process.h>
+#define EXECVP_CAST
+#else
+#include <unistd.h>
+typedef char TCHAR;
+#define _T(x) x
+#define _tcsrchr strrchr
+#define _tcschr strchr
+#define _tcsdup strdup
+#define _tcscpy strcpy
+#define _tcslen strlen
+#define _tcscmp strcmp
+#define _tcsncmp strncmp
+#define _tperror perror
+#define _texecvp execvp
+#define _tmain main
+#define _ftprintf fprintf
+#define _vftprintf vfprintf
+#define _tunlink unlink
+#define EXECVP_CAST (char **)
+#endif
+
+#ifdef _UNICODE
+#define TS "%ls"
+#else
+#define TS "%s"
+#endif
+
+#ifdef _WIN32
+static inline TCHAR *escape(const TCHAR *str) {
+    TCHAR *out = malloc((_tcslen(str) * 2 + 3) * sizeof(*out));
+    TCHAR *ptr = out;
+    int i;
+    *ptr++ = '"';
+    for (i = 0; str[i]; i++) {
+        if (str[i] == '"') {
+            int j = i - 1;
+            // Before all double quotes, backslashes need to be escaped, but
+            // not elsewhere.
+            while (j >= 0 && str[j--] == '\\')
+                *ptr++ = '\\';
+            // Escape the next double quote.
+            *ptr++ = '\\';
+        }
+        *ptr++ = str[i];
+    }
+    // Any final backslashes, before the quote around the whole argument,
+    // need to be doubled.
+    int j = i - 1;
+    while (j >= 0 && str[j--] == '\\')
+        *ptr++ = '\\';
+    *ptr++ = '"';
+    *ptr++ = '\0';
+    return out;
+}
+
+static inline int _tspawnvp_escape(int mode, const TCHAR *filename, const TCHAR * const *argv) {
+    int num_args = 0;
+    while (argv[num_args])
+        num_args++;
+    const TCHAR **escaped_argv = malloc((num_args + 1) * sizeof(*escaped_argv));
+    for (int i = 0; argv[i]; i++)
+        escaped_argv[i] = escape(argv[i]);
+    escaped_argv[num_args] = NULL;
+    return _tspawnvp(mode, filename, escaped_argv);
+}
+#else
+static inline int _tcsicmp(const TCHAR *a, const TCHAR *b) {
+    while (*a && tolower(*a) == tolower(*b)) {
+        a++;
+        b++;
+    }
+    return *a - *b;
+}
+#endif
+
+static inline TCHAR *concat(const TCHAR *prefix, const TCHAR *suffix) {
+    int prefixlen = _tcslen(prefix);
+    int suffixlen = _tcslen(suffix);
+    TCHAR *buf = malloc((prefixlen + suffixlen + 1) * sizeof(*buf));
+    _tcscpy(buf, prefix);
+    _tcscpy(buf + prefixlen, suffix);
+    return buf;
+}
+
+static inline TCHAR *_tcsrchrs(const TCHAR *str, TCHAR char1, TCHAR char2) {
+    TCHAR *ptr1 = _tcsrchr(str, char1);
+    TCHAR *ptr2 = _tcsrchr(str, char2);
+    if (!ptr1)
+        return ptr2;
+    if (!ptr2)
+        return ptr1;
+    if (ptr1 < ptr2)
+        return ptr2;
+    return ptr1;
+}
+
+static inline void split_argv(const TCHAR *argv0, const TCHAR **dir_ptr, const TCHAR **basename_ptr, const TCHAR **target_ptr, const TCHAR **exe_ptr) {
+    const TCHAR *sep = _tcsrchrs(argv0, '/', '\\');
+    TCHAR *dir = _tcsdup(_T(""));
+    const TCHAR *basename = argv0;
+    if (sep) {
+        dir = _tcsdup(argv0);
+        dir[sep + 1 - argv0] = '\0';
+        basename = sep + 1;
+    }
+#ifdef _WIN32
+    TCHAR module_path[8192];
+    GetModuleFileName(NULL, module_path, sizeof(module_path)/sizeof(module_path[0]));
+    TCHAR *sep2 = _tcsrchr(module_path, '\\');
+    if (sep2) {
+        sep2[1] = '\0';
+        dir = _tcsdup(module_path);
+    }
+#endif
+    basename = _tcsdup(basename);
+    TCHAR *period = _tcschr(basename, '.');
+    if (period)
+        *period = '\0';
+    TCHAR *target = _tcsdup(basename);
+    TCHAR *dash = _tcsrchr(target, '-');
+    const TCHAR *exe = basename;
+    if (dash) {
+        *dash = '\0';
+        exe = dash + 1;
+    } else {
+        target = NULL;
+    }
+
+    if (dir_ptr)
+        *dir_ptr = dir;
+    if (basename_ptr)
+        *basename_ptr = basename;
+    if (target_ptr)
+        *target_ptr = target;
+    if (exe_ptr)
+        *exe_ptr = exe;
+}
+
+static inline int run_final(const TCHAR *executable, const TCHAR *const *argv) {
+#ifdef _WIN32
+    int ret = _tspawnvp_escape(_P_WAIT, executable, argv);
+    if (ret == -1) {
+        _tperror(executable);
+        return 1;
+    }
+    return ret;
+#else
+    // On unix, exec() runs the target executable within this same process,
+    // making the return code propagate implicitly.
+    // Windows doesn't have such mechanisms, and the exec() family of functions
+    // makes the calling process exit immediately and always returning
+    // a zero return. This doesn't work for our case where we need the
+    // return code propagated.
+    _texecvp(executable, EXECVP_CAST argv);
+
+    _tperror(executable);
+    return 1;
+#endif
+}
diff --git a/mingw-w64-clang/windres-wrapper.c b/mingw-w64-clang/windres-wrapper.c
new file mode 100644
index 000000000..edb78c209
--- /dev/null
+++ b/mingw-w64-clang/windres-wrapper.c
@@ -0,0 +1,405 @@
+/*
+ * Copyright (c) 2018 Josh de Kock <josh@itanimul.li>
+ * Copyright (c) 2018 Martin Storsjo <martin@martin.st>
+ *
+ * This file is part of llvm-mingw.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include "native-wrapper.h"
+
+#ifndef DEFAULT_TARGET
+#define DEFAULT_TARGET "x86_64-w64-mingw32"
+#endif
+
+#include <stdarg.h>
+
+#ifdef _WIN32
+#else
+#define _tspawnvp_escape _spawnvp
+
+#include <sys/wait.h>
+#include <errno.h>
+
+#define _P_WAIT 0
+static int _spawnvp(int mode, const char *filename, const char * const *argv) {
+    pid_t pid;
+    if (!(pid = fork())) {
+        execvp(filename, (char **) argv);
+        perror(filename);
+        exit(1);
+    }
+    int stat = 0;
+    if (waitpid(pid, &stat, 0) == -1)
+        return -1;
+    if (WIFEXITED(stat))
+        return WEXITSTATUS(stat);
+    errno = EIO;
+    return -1;
+}
+#endif
+
+// GNU binutils windres seem to require an extra level of escaping of
+// -D options to the preprocessor, which we need to undo here.
+// For defines that produce quoted strings, this windres frontend is
+// called with parameters like this: -DSTRING=\\\"1.2.3\\\"
+static const TCHAR *unescape_cpp(const TCHAR *str) {
+    TCHAR *out = _tcsdup(str);
+    int len = _tcslen(str);
+    int i, outpos = 0;
+    for (i = 0; i < len - 1; i++) {
+        if (str[i] == '\\' && str[i + 1] == '"')
+            continue;
+        out[outpos++] = str[i];
+    }
+    while (i < len)
+        out[outpos++] = str[i++];
+    out[outpos++] = '\0';
+    return out;
+}
+
+static void print_version(void) {
+    printf(
+"version: LLVM windres (GNU windres compatible) 0.1\n"
+    );
+    exit(1);
+}
+
+static void print_help(void) {
+    printf(
+"usage: llvm-windres <OPTION> [INPUT-FILE] [OUTPUT-FILE]\n"
+"\n"
+"LLVM Tool to manipulate Windows resources with a GNU windres interface.\n"
+"\n"
+"Options:\n"
+"  -i, --input <arg>          Name of the input file.\n"
+"  -o, --output <arg>         Name of the output file.\n"
+"  -J, --input-format <arg>   Input format to read.\n"
+"  -O, --output-format <arg>  Output format to generate.\n"
+"  --preprocessor <arg>       Custom preprocessor command.\n"
+"  --preprocessor-arg <arg>   Preprocessor command arguments.\n"
+"  -F, --target <arg>         Target for COFF objects to be compiled for.\n"
+"  -I, --include-dir <arg>    Include directory to pass to preprocessor and resource compiler.\n"
+"  -D, --define <arg[=val]>   Define to pass to preprocessor.\n"
+"  -U, --undefine <arg[=val]> Undefine to pass to preprocessor.\n"
+"  -c, --codepage <arg>       Default codepage to use when reading an rc file (0x0-0xffff).\n"
+"  -l, --language <arg>       Specify default language (0x0-0xffff).\n"
+"      --use-temp-file        Use a temporary file for the preprocessing output.\n"
+"  -v, --verbose              Enable verbose output.\n"
+"  -V, --version              Display version.\n"
+"  -h, --help                 Display this message and exit.\n"
+"Input Formats:\n"
+"  rc                         Text Windows Resource\n"
+"  res                        Binary Windows Resource\n"
+"Output Formats:\n"
+"  res                        Binary Windows Resource\n"
+"  coff                       COFF object\n"
+"Targets:\n"
+"  pe-x86-64\n"
+"  pei-x86-64\n"
+"  pe-i386\n"
+"  pei-i386\n"
+    );
+    exit(1);
+}
+
+static void error(const TCHAR *basename, const TCHAR *fmt, ...) {
+    _ftprintf(stderr, _T(TS": error: "), basename);
+    va_list ap;
+    va_start(ap, fmt);
+    _vftprintf(stderr, fmt, ap);
+    _ftprintf(stderr, _T("\n"));
+    va_end(ap);
+    exit(1);
+}
+
+static void print_argv(const TCHAR **exec_argv) {
+    while (*exec_argv) {
+        _ftprintf(stderr, _T(TS" "), *exec_argv);
+        exec_argv++;
+    }
+    _ftprintf(stderr, _T("\n"));
+}
+
+static void check_num_args(int arg, int max_arg) {
+    if (arg > max_arg) {
+        fprintf(stderr, "Too many options added\n");
+        abort();
+    }
+}
+
+int _tmain(int argc, TCHAR* argv[]) {
+    const TCHAR *dir;
+    const TCHAR *basename;
+    const TCHAR *target;
+    split_argv(argv[0], &dir, &basename, &target, NULL);
+    if (!target)
+        target = _T(DEFAULT_TARGET);
+
+    const TCHAR *bfd_target = NULL;
+    const TCHAR *input = _T("-");
+    const TCHAR *output = _T("/dev/stdout");
+    const TCHAR *input_format = _T("rc");
+    const TCHAR *output_format = _T("coff");
+    const TCHAR **includes = malloc(argc * sizeof(*includes));
+    int nb_includes = 0;
+    const TCHAR *codepage = _T("1252");
+    const TCHAR *language = NULL;
+    const TCHAR **cpp_options = malloc(argc * sizeof(*cpp_options));
+    int nb_cpp_options = 0;
+    int verbose = 0;
+
+#define _tcslen_const(a) (sizeof(a)/sizeof(TCHAR) - 1)
+#define _tcsstart(a, b) !_tcsncmp(a, b, _tcslen_const(b))
+
+#define IF_MATCH_EITHER(short, long) \
+    if (!_tcscmp(argv[i], _T(short)) || !_tcscmp(argv[i], _T(long)))
+#define IF_MATCH_THREE(first, second, third) \
+    if (!_tcscmp(argv[i], _T(first)) || !_tcscmp(argv[i], _T(second)) || !_tcscmp(argv[i], _T(third)))
+#define OPTION(short, long, var) \
+    if (_tcsstart(argv[i], _T(short)) && argv[i][_tcslen_const(_T(short))]) { \
+        var = argv[i] + _tcslen_const(_T(short)); \
+    } else if (_tcsstart(argv[i], _T(long "="))) { \
+        var = _tcschr(argv[i], '=') + 1; \
+    } else IF_MATCH_EITHER(short, long) { \
+        if (i + 1 < argc) \
+            var = argv[++i]; \
+        else \
+            error(basename, _T(TS" missing argument"), argv[i]); \
+    }
+#define SEPARATE_ARG(var) do { \
+        if (i + 1 < argc) \
+            var = argv[++i]; \
+        else \
+            error(basename, _T(TS" missing argument"), argv[i]); \
+    } while (0)
+#define SEPARATE_ARG_PREFIX(var, prefix) do { \
+        if (i + 1 < argc) \
+            var = concat(_T(prefix), argv[++i]); \
+        else \
+            error(basename, _T(TS" missing argument"), argv[i]); \
+    } while (0)
+
+    for (int i = 1; i < argc; i++) {
+        OPTION("-i", "--input", input)
+        else OPTION("-o", "--output", output)
+        else OPTION("-J", "--input-format", input_format)
+        else OPTION("-O", "--output-format", output_format)
+        else OPTION("-F", "--target", bfd_target)
+        else IF_MATCH_THREE("-I", "--include-dir", "--include") {
+            SEPARATE_ARG(includes[nb_includes++]);
+        } else if (_tcsstart(argv[i], _T("--include-dir=")) ||
+                   _tcsstart(argv[i], _T("--include="))) {
+            includes[nb_includes++] = _tcschr(argv[i], '=') + 1;
+        } else if (_tcsstart(argv[i], _T("-I"))) {
+            includes[nb_includes++] = argv[i] + 2;
+        } else OPTION("-c", "--codepage", codepage)
+        else OPTION("-l", "--language", language)
+        else if (!_tcscmp(argv[i], _T("--preprocessor"))) {
+            error(basename, _T("ENOSYS"));
+        } else if (_tcsstart(argv[i], _T("--preprocessor-arg="))) {
+            cpp_options[nb_cpp_options++] = _tcschr(argv[i], '=') + 1;
+        } else if (!_tcscmp(argv[i], _T("--preprocessor-arg"))) {
+            SEPARATE_ARG(cpp_options[nb_cpp_options++]);
+        } else IF_MATCH_EITHER("-D", "--define") {
+            SEPARATE_ARG_PREFIX(cpp_options[nb_cpp_options++], "-D");
+        } else if (_tcsstart(argv[i], _T("-D"))) {
+            cpp_options[nb_cpp_options++] = argv[i];
+        } else IF_MATCH_EITHER("-U", "--undefine") {
+            SEPARATE_ARG_PREFIX(cpp_options[nb_cpp_options++], "-U");
+        } else if (_tcsstart(argv[i], _T("-U"))) {
+            cpp_options[nb_cpp_options++] = argv[i];
+        } else IF_MATCH_EITHER("-v", "--verbose") {
+            verbose = 1;
+        } else IF_MATCH_EITHER("-V", "--version") {
+            print_version();
+        } else IF_MATCH_EITHER("-h", "--help") {
+            print_help();
+        } else if (!_tcscmp(argv[i], _T("--use-temp-file"))) {
+            // No-op, we use a temp file by default.
+        } else if (_tcsstart(argv[i], _T("-"))) {
+            error(basename, _T("unrecognized option: `"TS"'"), argv[i]);
+        } else {
+            if (!_tcscmp(input, _T("-")))
+                input = argv[i];
+            else if (!_tcscmp(output, _T("/dev/stdout")))
+                output = argv[i];
+            else
+                error(basename, _T("rip: `"TS"'"), argv[i]);
+        }
+    }
+    if (bfd_target) {
+        if (!_tcscmp(bfd_target, _T("pe-x86-64")) ||
+            !_tcscmp(bfd_target, _T("pei-x86-64")))
+            target = _T("x86_64-w64-mingw32");
+        else if (!_tcscmp(bfd_target, _T("pe-i386")) ||
+                 !_tcscmp(bfd_target, _T("pei-i386")))
+            target = _T("i686-w64-mingw32");
+        else
+            error(basename, _T("unsupported target: `"TS"'"), bfd_target);
+    }
+
+    TCHAR *arch = _tcsdup(target);
+    TCHAR *dash = _tcschr(arch, '-');
+    if (dash)
+        *dash = '\0';
+
+    const TCHAR *machine = _T("unknown");
+    if (!_tcscmp(arch, _T("i686")))
+        machine = _T("X86");
+    else if (!_tcscmp(arch, _T("x86_64")))
+        machine = _T("X64");
+    else if (!_tcscmp(arch, _T("armv7")))
+        machine = _T("ARM");
+    else if (!_tcscmp(arch, _T("aarch64")))
+        machine = _T("ARM64");
+
+    const TCHAR *CC = concat(target, _T("-clang"));
+
+    const TCHAR **rc_options = malloc(2 * argc * sizeof(*cpp_options));
+    int nb_rc_options = 0;
+    for (int i = 0; i < nb_includes; i++) {
+        cpp_options[nb_cpp_options++] = concat(_T("-I"), includes[i]);
+        rc_options[nb_rc_options++] = _T("-I");
+        rc_options[nb_rc_options++] = includes[i];
+    }
+
+    for (int i = 0; i < nb_cpp_options; i++)
+        cpp_options[i] = unescape_cpp(cpp_options[i]);
+
+    const TCHAR *preproc_rc = concat(output, _T(".preproc.rc"));
+    const TCHAR *res = concat(output, _T(".out.res"));
+
+    TCHAR *inputdir = _tcsdup(input);
+    {
+        TCHAR *sep = _tcsrchrs(inputdir, '/', '\\');
+        if (sep)
+            *sep = '\0';
+        else
+            inputdir = _tcsdup(_T("."));
+    }
+
+
+    int max_arg = 2 * argc + 20;
+    const TCHAR **exec_argv = malloc((max_arg + 1) * sizeof(*exec_argv));
+    int arg = 0;
+
+    if (!_tcsicmp(input_format, _T("rc"))) {
+        exec_argv[arg++] = concat(dir, CC);
+        exec_argv[arg++] = _T("-E");
+        for (int i = 0; i < nb_cpp_options; i++)
+            exec_argv[arg++] = cpp_options[i];
+        exec_argv[arg++] = _T("-xc");
+        exec_argv[arg++] = _T("-DRC_INVOKED=1");
+        exec_argv[arg++] = input;
+        exec_argv[arg++] = _T("-o");
+        exec_argv[arg++] = preproc_rc;
+        exec_argv[arg] = NULL;
+
+        check_num_args(arg, max_arg);
+        if (verbose)
+            print_argv(exec_argv);
+        int ret = _tspawnvp_escape(_P_WAIT, exec_argv[0], exec_argv);
+        if (ret == -1) {
+            _tperror(exec_argv[0]);
+            return 1;
+        }
+        if (ret != 0) {
+            error(basename, _T("preprocessor failed"));
+            return ret;
+        }
+
+        arg = 0;
+        exec_argv[arg++] = concat(dir, _T("llvm-rc"));
+        for (int i = 0; i < nb_rc_options; i++)
+            exec_argv[arg++] = rc_options[i];
+        exec_argv[arg++] = _T("-I");
+        exec_argv[arg++] = inputdir;
+        exec_argv[arg++] = preproc_rc;
+        exec_argv[arg++] = _T("-c");
+        exec_argv[arg++] = codepage;
+        if (language) {
+            exec_argv[arg++] = _T("-l");
+            exec_argv[arg++] = language;
+        }
+        exec_argv[arg++] = _T("-fo");
+        if (!_tcsicmp(output_format, _T("res")))
+            exec_argv[arg++] = output;
+        else
+            exec_argv[arg++] = res;
+        exec_argv[arg] = NULL;
+
+        check_num_args(arg, max_arg);
+        if (verbose)
+            print_argv(exec_argv);
+        ret = _tspawnvp_escape(_P_WAIT, exec_argv[0], exec_argv);
+        if (ret == -1) {
+            _tperror(exec_argv[0]);
+            return 1;
+        }
+        if (ret != 0) {
+            error(basename, _T("llvm-rc failed"));
+            if (!verbose)
+                _tunlink(preproc_rc);
+            return ret;
+        }
+
+        if (!_tcsicmp(output_format, _T("res"))) {
+            // All done
+        } else if (!_tcsicmp(output_format, _T("coff"))) {
+            arg = 0;
+            exec_argv[arg++] = concat(dir, _T("llvm-cvtres"));
+            exec_argv[arg++] = res;
+            exec_argv[arg++] = concat(_T("-machine:"), machine);
+            exec_argv[arg++] = concat(_T("-out:"), output);
+            exec_argv[arg] = NULL;
+
+            check_num_args(arg, max_arg);
+            if (verbose)
+                print_argv(exec_argv);
+            int ret = _tspawnvp_escape(_P_WAIT, exec_argv[0], exec_argv);
+            if (ret == -1) {
+                _tperror(exec_argv[0]);
+                return 1;
+            }
+            if (!verbose) {
+                _tunlink(preproc_rc);
+                _tunlink(res);
+            }
+            return ret;
+        } else {
+            error(basename, _T("invalid output format: `"TS"'"), output_format);
+        }
+    } else if (!_tcsicmp(input_format, _T("res"))) {
+        exec_argv[arg++] = concat(dir, _T("llvm-cvtres"));
+        exec_argv[arg++] = input;
+        exec_argv[arg++] = concat(_T("-machine:"), machine);
+        exec_argv[arg++] = concat(_T("-out:"), output);
+        exec_argv[arg] = NULL;
+
+        check_num_args(arg, max_arg);
+        if (verbose)
+            print_argv(exec_argv);
+        int ret = _tspawnvp_escape(_P_WAIT, exec_argv[0], exec_argv);
+        if (ret == -1) {
+            _tperror(exec_argv[0]);
+            return 1;
+        }
+        return ret;
+    } else {
+        error(basename, _T("invalid input format: `"TS"'"), input_format);
+    }
+
+    return 0;
+}
diff --git a/mingw-w64-clang/windres.LICENSE b/mingw-w64-clang/windres.LICENSE
new file mode 100644
index 000000000..c43812d12
--- /dev/null
+++ b/mingw-w64-clang/windres.LICENSE
@@ -0,0 +1,18 @@
+/*
+ * Copyright (c) 2018 Josh de Kock <josh@itanimul.li>
+ * Copyright (c) 2018 Martin Storsjo <martin@martin.st>
+ *
+ * This file is part of llvm-mingw.
+ *
+ * Permission to use, copy, modify, and/or distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
-- 
2.31.1.windows.1

